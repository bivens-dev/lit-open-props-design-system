{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../src/components/checkbox/lib/checkbox.ts"],"names":[],"mappings":";AAAA;;;;GAIG;AACH,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAC,IAAI,EAAC,MAAM,wBAAwB,CAAC;AAC5C,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AACrD,OAAO,EAAC,SAAS,EAAC,MAAM,8BAA8B,CAAC;AAEvD;;GAEG;AACH,MAAM,OAAO,YAAa,SAAQ,UAAU;IAA5C;;QACE;;WAEG;QAEH,YAAO,GAAG,KAAK,CAAC;QAEhB;;WAEG;QAEH,aAAQ,GAAG,KAAK,CAAC;QAEjB;;WAEG;QAEH,SAAI,GAAG,EAAE,CAAC;QAEV;;WAEG;QAEH,UAAK,GAAG,EAAE,CAAC;QAED,UAAK,GAA2B,IAAI,CAAC;IAuEjD,CAAC;IArEU,MAAM;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAA,yBAAyB,QAAQ,CAAC,WAAW,CAAC;;;;kBAI3C,IAAI,CAAC,SAAS;mBACb,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;oBACjB,IAAI,CAAC,QAAQ;qBACZ,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;;;;;;;;WAQxD,CAAC;IACV,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,yCAAyC;QACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAC1B,UAAU,EACV,IAAI,CAAC,WAA4D,CAClE,CAAC;IACJ,CAAC;IAEQ,oBAAoB;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAE7B,mCAAmC;QACnC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAC7B,UAAU,EACV,IAAI,CAAC,WAA4D,CAClE,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,WAAW,CAAC,CAAW;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO;SACR;QAED,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACO,eAAe;QACvB,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,SAAS,CAAC,CAAQ;QAC1B,IAAI,CAAC,OAAO,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;QACtD,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,CAAC;CACF;AA3FC;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;6CACzB;AAMhB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;8CACT;AAMjB;IADC,QAAQ,EAAE;0CACD;AAMV;IADC,QAAQ,EAAE;2CACA","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {live} from 'lit/directives/live.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\n/**\n * @fires change - Fires when the value of the checkbox changes via user interaction.\n */\nexport class CheckboxImpl extends LitElement {\n  /**\n   * Whether or not the checkbox is checked.\n   */\n  @property({type: Boolean, reflect: true})\n  checked = false;\n\n  /**\n   * Whether or not the checkbox is disabled.\n   */\n  @property({type: Boolean})\n  disabled = false;\n\n  /**\n   * Checkbox name for forms.\n   */\n  @property()\n  name = '';\n\n  /**\n   * aria-label value.\n   */\n  @property()\n  label = '';\n\n  protected _form: HTMLFormElement | null = null;\n\n  override render() {\n    const rootClasses = this._getRootClasses();\n\n    return html` <div id=\"root\" class=${classMap(rootClasses)}>\n      <input\n        type=\"checkbox\"\n        part=\"input\"\n        @change=${this._onChange}\n        .checked=${live(this.checked)}\n        .disabled=${this.disabled}\n        aria-label=${ifDefined(this.label ? this.label : undefined)}\n      />\n      <div id=\"ripple\" part=\"ripple\"></div>\n      <div id=\"square\" part=\"square\">\n        <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n          <path fill=\"none\" d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n        </svg>\n      </div>\n    </div>`;\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    // Set up basic form submission handling.\n    this._form = this.closest('form');\n    this._form?.addEventListener(\n      'formdata',\n      this._onFormdata as unknown as EventListenerOrEventListenerObject\n    );\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // Remove form submission handling.\n    this._form?.removeEventListener(\n      'formdata',\n      this._onFormdata as unknown as EventListenerOrEventListenerObject\n    );\n  }\n\n  /**\n   * @param {FormData} e The FormData event fired before each form submission.\n   */\n  protected _onFormdata(e: FormData) {\n    if (!this.name) {\n      return;\n    }\n\n    e.set(this.name, '' + this.checked);\n  }\n\n  /**\n   * Gets the classes for the root element. Meant to be overridden by subclasses.\n   */\n  protected _getRootClasses() {\n    return {\n      checked: this.checked,\n    };\n  }\n\n  /**\n   * @param {Event} e The DOM Change event.\n   */\n  protected _onChange(e: Event) {\n    this.checked = (e.target as HTMLInputElement).checked;\n    this.dispatchEvent(new Event('change'));\n  }\n}\n"]}